[{"/home/art/estudos/fullstack/my-app/src/app/forgotPassword/components/form.tsx":"1","/home/art/estudos/fullstack/my-app/src/app/forgotPassword/page.tsx":"2","/home/art/estudos/fullstack/my-app/src/app/layout.tsx":"3","/home/art/estudos/fullstack/my-app/src/app/login/components/form.tsx":"4","/home/art/estudos/fullstack/my-app/src/app/login/page.tsx":"5","/home/art/estudos/fullstack/my-app/src/app/page.tsx":"6","/home/art/estudos/fullstack/my-app/src/app/register/components/formRegister.tsx":"7","/home/art/estudos/fullstack/my-app/src/app/register/page.tsx":"8","/home/art/estudos/fullstack/my-app/src/app/users/[id]/[id].tsx":"9","/home/art/estudos/fullstack/my-app/src/app/users/[id]/components/buttons.tsx":"10","/home/art/estudos/fullstack/my-app/src/app/users/[id]/components/content.tsx":"11","/home/art/estudos/fullstack/my-app/src/app/users/[id]/edit/components/editForm.tsx":"12","/home/art/estudos/fullstack/my-app/src/app/users/[id]/edit/page.tsx":"13","/home/art/estudos/fullstack/my-app/src/app/users/[id]/page.tsx":"14","/home/art/estudos/fullstack/my-app/src/utils/provider.tsx":"15"},{"size":3405,"mtime":1696350625234,"results":"16","hashOfConfig":"17"},{"size":191,"mtime":1696343600324,"results":"18","hashOfConfig":"17"},{"size":411,"mtime":1696294487559,"results":"19","hashOfConfig":"17"},{"size":5582,"mtime":1696350680344,"results":"20","hashOfConfig":"17"},{"size":225,"mtime":1696337163864,"results":"21","hashOfConfig":"17"},{"size":527,"mtime":1696294461809,"results":"22","hashOfConfig":"17"},{"size":4910,"mtime":1696294286349,"results":"23","hashOfConfig":"17"},{"size":251,"mtime":1696337174494,"results":"24","hashOfConfig":"17"},{"size":1230,"mtime":1696347836544,"results":"25","hashOfConfig":"17"},{"size":1501,"mtime":1696293820149,"results":"26","hashOfConfig":"17"},{"size":175,"mtime":1696293765639,"results":"27","hashOfConfig":"17"},{"size":6939,"mtime":1696347783654,"results":"28","hashOfConfig":"17"},{"size":229,"mtime":1696293274749,"results":"29","hashOfConfig":"17"},{"size":269,"mtime":1696294308799,"results":"30","hashOfConfig":"17"},{"size":483,"mtime":1696294498549,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"1font9s",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/art/estudos/fullstack/my-app/src/app/forgotPassword/components/form.tsx",["80","81"],[],"import { useState } from 'react';\nimport axios from 'axios';\nimport Link from 'next/link';\n\n\n\nconst FormPassword = () => {\n    const [email, setEmail] = useState<string>('');\n    const [message, setMessage] = useState<string>('');\n    const [messageIsError, setMessageIsError] = useState<boolean>(false)\n\n    const handleSubmit = async (e: any) => {\n        e.preventDefault();\n\n        try {\n            const response = await axios.post('http://localhost:3000/api/auth/forgot-password', {\n                email\n            });\n            setMessage(\"Email enviado!\");\n            setMessageIsError(false);\n        } catch (error: any) {\n            console.log(error);\n            \n            if(error.response) {\n                const response = error.response;\n                const status = response.status;\n                const message = response.data.message\n\n                if(status === 401) {\n                    setMessage(message);\n                    setMessageIsError(true);\n                  } else if (status === 400) {\n                    setMessage(message);\n                    setMessageIsError(true);\n                  } else if (status === 500) {\n                    setMessage(message);\n                    setMessageIsError(true);\n                  }\n            }\n        }\n    }\n \n\nreturn (\n    <div className=\"bg-gray-200 w-full h-screen\">\n        <form onSubmit={handleSubmit} className=\"flex mx-auto flex w-1/3 h-screen sm:max-w-md\">\n            <div className=\"flex flex-col mx-auto rounded-2xl mt-72 bg-white md:h-fit lg:h-fit sm:h-fit w-2/2 p-4\">\n                <p className=\"text-lg absolute h-8 w-1/4 md:h-8 md:w-1/4 sm:w-1/4 font-semibold\">Password reset</p>\n                <div className=\"flex mt-12 text-sm md:text-base sm:text-base\">\n                    <p className=\"md:text-base \">Enter the email address you used to sign up for an account. We will send you a link to reset your password.</p>\n                </div>\n                <div className=\"flex bg-gray-200 rounded p-2 mt-4\">\n                    <input className=\"p-2 w-full text-base bg-gray-200\" placeholder='Email' onChange={(e) => setEmail(e.target.value)} type=\"email\" value={email}/>\n                </div>\n                <div className=\"flex bg-blue-600 hover:bg-blue-700 rounded text-white p-3 mt-4 w-full text-sm rounded justify-center\">\n                    <button className=\"text-base font-semibold\" type='submit'>Send password reset email</button>\n                </div>\n                <h3 className=\"mt-4 font-semibold md:text-base\">Signed up with Apple or Google or Apple?</h3>\n                <p className=\"lg:text-base mt-4 hidden md:block\">&#39;Then we can't reset your password here. You should log in using the same 3rd party application you signed up with.&#39;</p>\n                <p className='text-sm mt-4 font-light text-gray-500 dark:text-gray-400'>&#39;\n                    Don't have an account yet? <Link href=\"/login\" className='font-medium text-blue-500 hover:underline dark:text-primary-500'>Sign up</Link>\n                &#39;</p>\n                {message && (\n              <div className={`p-3 rounded-md md: text-base text-center ${messageIsError ? 'bg-red-100 text-red-900' : 'bg-green-100 text-green-900'} mt-4`}>\n                {message}\n              </div>\n            )}\n            </div>\n        </form>\n    </div>\n    )\n  }\n\nexport default FormPassword;","/home/art/estudos/fullstack/my-app/src/app/forgotPassword/page.tsx",[],[],"/home/art/estudos/fullstack/my-app/src/app/layout.tsx",[],[],"/home/art/estudos/fullstack/my-app/src/app/login/components/form.tsx",["82"],[],"import Link from \"next/link\"\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation';\n\n\nexport default function Form() {\n\n\nconst [email, setEmail] = useState<string>('');\nconst [password, setPassword] = useState<string>('');\nconst [rememberMe, setRememberMe] = useState<boolean>(false);\n\nconst router = useRouter();\n\n   const handleCheckboxChange = (e: any) => {\n    setRememberMe(e.target.checked);\n  }\n\n   const handleSubmit = async (e: any) => {\n    e.preventDefault();\n\n      const response = await fetch('http://localhost:3000/api/auth/login', {\n      method: \"POST\",\n      body: JSON.stringify( {\n        email,\n        password\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n    });\n\n    if (rememberMe) {\n      localStorage.setItem('rememberedEmail', email);\n      localStorage.setItem('rememberedPassword', password);\n    } else {\n      localStorage.removeItem('rememberedEmail');\n      localStorage.removeItem('rememberedPassword');\n    }\n\n    if(response.status === 201) {\n      const json = await response.json();\n      const token: string = json.token;\n      localStorage.setItem('token', json.token);\n\n      const usernameResponse = await fetch('http://localhost:3000/users', {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      if(usernameResponse.status === 200) {\n        const usernameJson = await usernameResponse.json();\n        const username = [...usernameJson].find((user: any) => user.email === email).username;\n        \n\n        if(token) {\n          router.push(`/users/${username}`);\n          localStorage.setItem('token', token);\n          localStorage.setItem('username', username);\n\n        } else {\n          console.error(\"Token not found\");\n        }\n      } else {\n        console.error(\"Error for obtain username\");\n      }\n    } else {\n      console.log(\"Invalid credentials\");\n    }\n  }\n\n    useEffect(() => {\n      const rememberedEmail = localStorage.getItem('rememberedEmail');\n      const rememberedPassword = localStorage.getItem('rememberedPassword');\n     \n      if(rememberedEmail && rememberedPassword) {\n        setEmail(rememberedEmail);\n        setPassword(rememberedPassword);\n        setRememberMe(true);\n      }\n    }, [])\n\n    \n    return (\n        <div className='flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen'>\n\n        <div className='w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700'>\n          <div className='p-6 space-y-4 md:space-y-6 sm:p-8'>\n\n            <h1 className='text-xl font-bold leading-normal tracking-normal text-gray-900 md:text-2x1 dark:text-white'>\n              Sign in to your account\n            </h1>\n\n            <form onSubmit={handleSubmit} action=\"\" className='space-y-4 md:space-y-6'>\n              <div>\n                <label htmlFor=\"email\" className='block mb-2 text-sm font-medium text-gray-900 dark:text-white'>Email</label>\n                <input onChange={(e) => setEmail(e.target.value)} value={email} type=\"text\" name='email' id='email' className='bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500' placeholder='name@company.com' required />\n              </div>\n              <div>\n                <label htmlFor=\"\"></label>\n                <input onChange={(e) => setPassword(e.target.value)} value={password} type=\"password\" name=\"password\" id=\"password\" placeholder=\"••••••••\" className=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required />\n              </div>\n\n              <div className='flex items-center justify-between'>\n                <div className='flex items-start'>\n                  <div className='flex items-center h-5'>\n                    <input id=\"remember\" name=\"remember\" checked={rememberMe} onChange={handleCheckboxChange} aria-describedby=\"remember\" type=\"checkbox\" className=\"w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-primary-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-primary-600 dark:ring-offset-gray-800\"/>\n                  </div>\n                  <div className='ml-3 text-sm'>\n                    <label htmlFor=\"remember\" className='text-gray-500 dar:text-gray-300'>Remember me</label>\n                  </div>\n                </div>\n                <a href=\"/forgotPassword\" className='text-md font-medium text-blue-500 hover:underline dark:text-blue-500'>Forgot password?</a>\n              </div>\n              <button className='w-full text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800' type='submit'>Sign in</button>\n              <p className='text-sm font-light text-gray-500 dark:text-gray-400'>\n                Don't have an account yet? <Link href=\"/register\" className='font-medium text-blue-500 hover:underline dark:text-primary-500'>Sign up</Link>\n              </p>\n            </form>\n\n          </div>\n        </div>\n      </div>\n    )\n}","/home/art/estudos/fullstack/my-app/src/app/login/page.tsx",[],[],"/home/art/estudos/fullstack/my-app/src/app/page.tsx",[],[],"/home/art/estudos/fullstack/my-app/src/app/register/components/formRegister.tsx",[],[],"/home/art/estudos/fullstack/my-app/src/app/register/page.tsx",[],[],"/home/art/estudos/fullstack/my-app/src/app/users/[id]/[id].tsx",[],[],"/home/art/estudos/fullstack/my-app/src/app/users/[id]/components/buttons.tsx",[],[],"/home/art/estudos/fullstack/my-app/src/app/users/[id]/components/content.tsx",[],[],"/home/art/estudos/fullstack/my-app/src/app/users/[id]/edit/components/editForm.tsx",["83"],[],"import React, { useState } from 'react'\nimport axios from 'axios';\nimport { useRouter } from \"next/navigation\"\nimport Link from 'next/link';\n\ninterface FormDataProps {\n    username: string,\n    email: string,\n    password: string,\n    confirmPassword: string\n  }\n\nexport default function EditForm() {\n    const initialFormData: FormDataProps = { username: '', email: '', password: '', confirmPassword: '' };\n    const [formData, setFormData] = useState<FormDataProps>({ username: '', email: '', password: '', confirmPassword: '' });\n    const [message, setMessage] = useState<string>();\n    const [messageIsError, setMessageIsError] = useState<boolean>(true)\n    const [newEmail, setNewEmail] = useState<string>('');\n    const [confirmEmail, setConfirmEmail] = useState<string>('');\n \n    const router = useRouter();\n   const getUsername = () => {\n     const username: any = localStorage.getItem('username');\n     return username;\n   }\n \n   const handleInputChange = (e: any) => {\n     const { id, value } = e.target;\n     if (id === 'email') {\n       setNewEmail(value);\n     } else if (id === 'confirmEmail') {\n       setConfirmEmail(value);\n     }\n };\n \n   const handleSubmit = async (e: any) => {\n     e.preventDefault();\n \n     try {\n       const response = await axios.put(`http://localhost:3000/users/${getUsername()}`, {\n         username: formData.username,\n         email: newEmail,\n         confirmEmail: confirmEmail,\n         password: formData.password,\n         confirmPassword: formData.confirmPassword,\n       });\n\n       if (response.status === 200) {\n         setMessage(\"Conta Editada!\");\n         setFormData(initialFormData);\n         setMessageIsError(false);\n         localStorage.removeItem('token');\n         setTimeout(() => {\n           router.push(`/login`);\n         }, 2300);\n       }\n\n       } catch(error: any) {\n        if (error.response) {\n         const response = error.response;\n         const status = response.status;\n         const message = response.data.message\n         \n         if(status === 401) {\n           setMessage(message);\n           setMessageIsError(true);\n         } else if (status === 400) {\n           setMessage(message);\n           setMessageIsError(true);\n         } else if (status === 500) {\n           setMessage(message);\n           setMessageIsError(true);\n         }\n       } else {\n         console.error(\"Erro desconhecido\", message)\n     }\n   } \n }\n\n  return (\n    <div className='flex bg-gray-200 w-full h-screen flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen'>\n      <div className='w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700'>\n        <div className='p-6 space-y-4 md:space-y-6 sm:p-8'>\n          <h1 className='text-xl font-bold leading-normal tracking-normal text-gray-900 md:text-2x1 dark:text-white'>\n            Edit your account\n          </h1>\n          <form onSubmit={handleSubmit} className='space-y-4 md:space-y-6'>\n            <div>\n              <label htmlFor=\"name\" className='block mb-2 text-sm font-medium text-gray-900 dark:text-white'>New Username</label>\n              <input value={formData.username} onChange={(e) => setFormData({ ...formData, username: e.target.value })} type=\"text\" name='username' id='username' className='bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500' placeholder='Username' required />\n            </div> \n            <div>\n              <label htmlFor=\"email\" className='block mb-2 text-sm font-medium text-gray-900 dark:text-white'>New Email</label>\n              <input value={newEmail} onChange={handleInputChange} type=\"email\" name='email' id='email' className='bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500' placeholder='name@company.com' required />\n            </div>\n            <div>\n              <label htmlFor=\"email\" className='block mb-2 text-sm font-medium text-gray-900 dark:text-white'>Confirm Email</label>\n              <input value={confirmEmail} onChange={handleInputChange} type=\"email\" name='email' id='confirmEmail' className='bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500' placeholder='name@company.com' required />\n            </div>\n            <div>\n              <label htmlFor=\"password\">New Password</label>\n              <input value={formData.password} onChange={(e) => setFormData({ ...formData, password: e.target.value })} type=\"password\" name=\"password\" id=\"password\" placeholder=\"••••••••\" className=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required />\n            </div>\n            <div>\n              <label htmlFor=\"password\">Confirm Password</label>\n              <input value={formData.confirmPassword} onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })} type=\"password\" name=\"confirmPassword\" id=\"password\" placeholder=\"••••••••\" className=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required />\n            </div>\n            <p className='text-sm mt-4 font-light text-gray-500 dark:text-gray-400'>\n                Don't want edit your profile? come back to: <Link href={`/users/${getUsername()}`} className='font-medium text-blue-500 hover:underline dark:text-primary-500'>{getUsername()}</Link>\n              </p>\n              {message && (\n                <div className={`p-3 rounded-md ${messageIsError ? 'bg-red-100 text-red-900' : 'bg-green-100 text-green-900'}`}>\n                  {message}\n                </div>\n              )}\n              <button className='w-full text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800' type='submit'>Edit up</button>\n            </form>\n          </div>\n        </div>\n      </div>\n    )\n}","/home/art/estudos/fullstack/my-app/src/app/users/[id]/edit/page.tsx",[],[],"/home/art/estudos/fullstack/my-app/src/app/users/[id]/page.tsx",[],[],"/home/art/estudos/fullstack/my-app/src/utils/provider.tsx",[],[],{"ruleId":"84","severity":1,"message":"85","line":59,"column":82,"nodeType":"86","messageId":"87"},{"ruleId":"84","severity":1,"message":"85","line":61,"column":24,"nodeType":"86","messageId":"87"},{"ruleId":"84","severity":1,"message":"85","line":119,"column":20,"nodeType":"86","messageId":"87"},{"ruleId":"84","severity":1,"message":"85","line":109,"column":20,"nodeType":"86","messageId":"87"},"react/no-unescaped-entities","`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","JSXText","unescapedEntityAlts"]